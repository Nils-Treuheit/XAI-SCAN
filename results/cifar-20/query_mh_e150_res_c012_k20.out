python singleInstance_varK.py -c 0,1,2 -k 20 --no_grad
Files already downloaded and verified
Read config file ./configs/pretext/simclr_cifar20.yml ...
{'setup': 'simclr', 'backbone': 'resnet18', 'model_kwargs': {'head': 'mlp', 'features_dim': 128}, 'train_db_name': 'cifar-20', 'val_db_name': 'cifar-20', 'num_classes': 20, 'criterion': 'simclr', 'criterion_kwargs': {'temperature': 0.1}, 'epochs': 500, 'optimizer': 'sgd', 'optimizer_kwargs': {'nesterov': False, 'weight_decay': 0.0001, 'momentum': 0.9, 'lr': 0.4}, 'scheduler': 'cosine', 'scheduler_kwargs': {'lr_decay_rate': 0.1}, 'batch_size': 512, 'num_workers': 8, 'augmentation_strategy': 'simclr', 'augmentation_kwargs': {'random_resized_crop': {'size': 32, 'scale': [0.2, 1.0]}, 'color_jitter_random_apply': {'p': 0.8}, 'color_jitter': {'brightness': 0.4, 'contrast': 0.4, 'saturation': 0.4, 'hue': 0.1}, 'random_grayscale': {'p': 0.2}, 'normalize': {'mean': [0.5071, 0.4867, 0.4408], 'std': [0.2675, 0.2565, 0.2761]}}, 'transformation_kwargs': {'crop_size': 32, 'normalize': {'mean': [0.5071, 0.4867, 0.4408], 'std': [0.2675, 0.2565, 0.2761]}}}
Read config file ./configs/scan/scan_cifar20.yml ...
{'setup': 'scan', 'criterion': 'scan', 'criterion_kwargs': {'entropy_weight': 5.0}, 'update_cluster_head_only': False, 'num_heads': 5, 'backbone': 'resnet18', 'train_db_name': 'cifar-20', 'val_db_name': 'cifar-20', 'num_classes': 20, 'num_neighbors': 20, 'nclusters': [5, 20, 100, 300, 500], 'augmentation_strategy': 'scan', 'augmentation_kwargs': {'crop_size': 32, 'normalize': {'mean': [0.5071, 0.4867, 0.4408], 'std': [0.2675, 0.2565, 0.2761]}, 'num_strong_augs': 4, 'cutout_kwargs': {'n_holes': 1, 'length': 16, 'random': True}}, 'transformation_kwargs': {'crop_size': 32, 'normalize': {'mean': [0.5071, 0.4867, 0.4408], 'std': [0.2675, 0.2565, 0.2761]}}, 'optimizer': 'adam', 'optimizer_kwargs': {'lr': 0.0001, 'weight_decay': 0.0001}, 'epochs': 150, 'batch_size': 512, 'num_workers': 8, 'scheduler': 'constant'}
Get models ...
SimCLR:
ContrastiveModel(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (contrastive_head): Sequential(
    (0): Linear(in_features=512, out_features=512, bias=True)
    (1): ReLU()
    (2): Linear(in_features=512, out_features=128, bias=True)
  )
)
SCAN:
ClusteringModel(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (cluster_head): ModuleList(
    (0): Linear(in_features=512, out_features=5, bias=True)
    (1): Linear(in_features=512, out_features=20, bias=True)
    (2): Linear(in_features=512, out_features=100, bias=True)
    (3): Linear(in_features=512, out_features=300, bias=True)
    (4): Linear(in_features=512, out_features=500, bias=True)
  )
)
Load model weights ...
Get query dataset ...
Files already downloaded and verified
Number of samples: 50001
Perform KNN calc for given img samples after SimCLR pass-through (setup=simclr).
Create Memory Bank
Fill memory bank for mining the nearest neighbors ...
Fill Memory Bank [0/98]
Mine the nearest neighbors (Top-20)
Accuracy of top-20 nearest neighbors on val set is 58.94
Files already downloaded and verified
Perform evaluation of the clustering model (setup=scan).
Features Shape: torch.Size([50001, 512])
0. Cluster Head
----------------
Predictions keys: dict_keys(['predictions', 'probabilities', 'targets', 'neighbors']) | Predictions Shape: torch.Size([50001])
1. Cluster Head
----------------
Predictions keys: dict_keys(['predictions', 'probabilities', 'targets', 'neighbors']) | Predictions Shape: torch.Size([50001])
2. Cluster Head
----------------
Predictions keys: dict_keys(['predictions', 'probabilities', 'targets', 'neighbors']) | Predictions Shape: torch.Size([50001])
{'ACC': 0.42805143897122055, 'ARI': 0.27600195049895815, 'NMI': 0.4450477279907287, 'ACC Top-5': 0.7661446771064578, 'hungarian_match': [(0, 14), (1, 0), (2, 4), (3, 10), (4, 11), (5, 19), (6, 15), (7, 6), (8, 12), (9, 1), (10, 17), (11, 16), (12, 8), (13, 18), (14, 7), (15, 9), (16, 2), (17, 3), (18, 13), (19, 5), (20, 20)]}
C:\Users\nilst\Documents\Workspace\1. Semester\AdvTop_ML\Project\XAI-SCAN\utils\evaluate_utils.py:145: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at C:\cb\pytorch_1000000000000\work\torch\csrc\utils\tensor_new.cpp:248.)
  neighbors.append(torch.tensor([np.array(nds[first_elem+idx]['possible_neighbors']) for idx in batch]))
Features of Sample/s: tensor([[7.6641e-01, 7.0726e-01, 1.1818e-01, 3.9475e-01, 7.1722e-02, 3.2488e-01,
         6.9741e-01, 1.8484e-01, 6.7763e-01, 3.5015e-02, 1.2012e-01, 4.0133e-01,
         4.8444e-01, 1.4889e-01, 3.2626e-01, 3.1672e-04, 1.2561e-01, 4.3230e-01,
         9.5208e-01, 9.0531e-02, 1.4313e-01, 8.0991e-02, 6.6944e-01, 6.3307e-01,
         6.2539e-01, 0.0000e+00, 7.4179e-02, 8.8755e-01, 7.3493e-01, 4.7470e-01,
         4.0519e-02, 1.1032e-01, 9.4313e-01, 7.3747e-02, 3.9202e-02, 1.9281e-01,
         4.5514e-02, 0.0000e+00, 6.2091e-01, 1.2623e+00, 5.6202e-01, 3.5385e-03,
         3.5449e-01, 9.9400e-01, 1.7853e-01, 4.5924e-02, 8.1703e-03, 3.0113e-01,
         3.0334e-01, 7.7688e-02, 0.0000e+00, 2.6223e-01, 3.9036e-01, 0.0000e+00,
         2.4800e-02, 0.0000e+00, 2.3592e-03, 5.7736e-01, 1.2070e+00, 1.8201e+00,
         1.4308e-01, 1.3514e+00, 1.8127e+00, 3.5559e-02, 0.0000e+00, 9.8643e-02,
         8.8125e-01, 1.9633e-02, 2.5701e-02, 1.3325e+00, 1.3128e+00, 5.6167e-02,
         7.7779e-01, 4.8696e-01, 4.1044e-01, 3.4541e-01, 8.9893e-01, 8.1847e-01,
         1.1700e+00, 2.6750e-01, 1.2132e-01, 1.3767e-01, 2.2248e-01, 1.1521e-01,
         9.4079e-02, 4.4052e-01, 6.7042e-02, 1.0904e+00, 6.4419e-01, 7.1958e-01,
         5.6639e-02, 8.1831e-03, 0.0000e+00, 4.4387e-02, 3.6367e-01, 1.0069e+00,
         7.9459e-02, 2.4224e-01, 7.2747e-01, 1.5624e+00, 2.0100e-01, 1.1536e+00,
         3.5032e-01, 2.2094e-01, 6.5737e-01, 2.9848e-01, 2.6607e-01, 8.0747e-01,
         1.1639e-01, 2.4164e-02, 6.6938e-01, 1.0134e+00, 8.2899e-02, 4.2225e-01,
         4.1290e-01, 0.0000e+00, 2.7493e-01, 4.0654e-03, 1.8499e+00, 6.3828e-01,
         2.0684e-02, 2.8875e-01, 7.9311e-01, 3.4564e-01, 6.1082e-01, 3.4060e-01,
         8.0093e-02, 1.2524e+00, 1.4606e+00, 1.3683e-01, 0.0000e+00, 1.4145e-01,
         1.3804e+00, 2.2873e-01, 1.4869e-01, 3.7868e-01, 1.7058e+00, 9.1306e-01,
         7.3479e-01, 5.9452e-01, 1.4746e-01, 0.0000e+00, 2.5918e-01, 0.0000e+00,
         7.2668e-01, 7.7491e-01, 6.6923e-02, 4.7810e-01, 3.4932e-01, 5.9118e-01,
         3.3781e-04, 6.3807e-01, 1.3405e-02, 4.4241e-01, 6.4746e-01, 5.8036e-02,
         0.0000e+00, 7.1790e-01, 1.5255e+00, 0.0000e+00, 2.1006e-01, 1.3508e+00,
         4.1939e-01, 9.0662e-01, 3.3385e-01, 3.2745e-02, 4.2312e-01, 1.3300e+00,
         7.6596e-01, 5.1338e-01, 0.0000e+00, 7.9894e-01, 1.0546e-01, 4.5178e-01,
         1.7381e-01, 4.0244e-01, 7.8130e-01, 2.4091e-01, 3.5353e-03, 7.7207e-01,
         0.0000e+00, 4.1156e-02, 2.4160e+00, 2.0873e-01, 1.1207e-01, 5.9938e-01,
         1.7772e+00, 3.8434e-01, 6.7735e-01, 1.0478e-01, 9.2827e-01, 7.1021e-01,
         5.6943e-01, 1.3950e+00, 1.0568e+00, 9.1084e-01, 5.3526e-01, 9.0751e-01,
         1.6541e-02, 1.5925e+00, 1.4176e+00, 7.6788e-02, 2.1329e-01, 0.0000e+00,
         0.0000e+00, 1.1531e-02, 3.6823e-01, 3.8253e-01, 8.7627e-02, 3.1397e-01,
         2.7178e-01, 1.3751e-03, 8.0629e-01, 3.0669e-01, 1.3112e+00, 4.3317e-01,
         3.4654e-01, 0.0000e+00, 6.7047e-02, 1.6216e-02, 9.3310e-01, 4.8438e-01,
         3.2442e-01, 4.2202e-01, 4.8856e-01, 5.7297e-01, 4.7998e-01, 0.0000e+00,
         6.4460e-03, 1.9987e-01, 5.1903e-01, 1.3593e-01, 1.0849e+00, 9.8552e-01,
         5.4361e-01, 2.5664e-02, 9.2245e-01, 6.0654e-02, 2.8073e-01, 4.5000e-02,
         8.1687e-01, 8.3617e-01, 8.6646e-01, 1.4280e-01, 2.2453e-02, 5.5301e-02,
         8.4146e-03, 3.0050e-02, 5.3211e-01, 1.7923e-01, 3.9806e-02, 2.4307e-01,
         7.0760e-01, 9.4276e-01, 1.5921e-02, 1.2873e-02, 1.4076e-01, 2.9420e-01,
         4.0166e-02, 7.2381e-01, 1.2281e+00, 3.1826e+00, 3.2230e-01, 1.0868e+00,
         1.1029e-01, 8.5245e-02, 3.1223e-01, 3.3242e-01, 4.3547e-01, 1.2578e-01,
         6.1046e-03, 4.3724e-03, 4.3321e-01, 9.1772e-01, 7.9171e-02, 8.6627e-03,
         3.4137e-01, 4.2026e-01, 7.9057e-01, 3.5803e-02, 4.7696e-03, 2.4144e-02,
         7.5558e-01, 6.1871e-01, 6.8996e-01, 4.3825e-01, 1.0682e-01, 3.0906e-01,
         7.9413e-02, 5.1455e-01, 1.6355e-01, 4.0783e-01, 2.3821e-02, 2.3526e-01,
         8.2711e-02, 1.8044e-01, 1.5637e-01, 2.9358e-01, 1.2936e-01, 3.0092e-01,
         3.7228e-01, 8.9071e-01, 4.4892e-02, 1.4345e-01, 1.0494e+00, 2.2760e-01,
         4.7464e-01, 1.6248e-02, 8.7341e-02, 9.5307e-01, 9.5013e-01, 3.0229e-01,
         2.0335e-01, 2.6325e-01, 5.2204e-02, 8.9963e-01, 8.3249e-03, 1.5862e+00,
         1.4980e-02, 8.0429e-02, 2.6985e-03, 7.1389e-01, 1.2434e+00, 1.5032e+00,
         5.0295e-01, 2.3357e-01, 8.8525e-02, 3.0500e-02, 9.2224e-01, 7.1993e-01,
         4.5876e-01, 0.0000e+00, 7.2862e-01, 0.0000e+00, 6.2916e-01, 2.9920e-01,
         5.2258e-02, 5.4499e-01, 1.7542e-01, 5.0920e-01, 2.0078e-02, 1.2706e-01,
         6.4347e-03, 1.1556e-02, 5.8379e-01, 8.9692e-02, 1.1981e-01, 4.8527e-01,
         1.1441e+00, 2.7723e-01, 4.9220e-01, 6.9162e-02, 1.1272e+00, 8.7937e-01,
         0.0000e+00, 4.3772e-01, 4.3228e-01, 6.0092e-01, 2.3968e-01, 8.5051e-02,
         1.0341e+00, 4.8020e-01, 1.6534e-01, 7.0939e-01, 4.8739e-02, 7.9200e-01,
         1.2365e-01, 4.8230e-03, 5.4878e-02, 5.8094e-01, 6.7657e-02, 4.0354e-02,
         8.5823e-01, 1.8068e+00, 2.2708e-02, 5.4752e-01, 3.2265e-01, 6.7176e-01,
         3.5935e-02, 8.7168e-02, 8.2937e-01, 2.1884e-01, 2.3666e-01, 1.5849e+00,
         6.1454e-02, 0.0000e+00, 3.9412e-02, 1.5748e-01, 2.6889e-01, 2.1614e-01,
         1.8774e-01, 7.7466e-02, 5.6258e-03, 0.0000e+00, 2.7476e-01, 1.9971e+00,
         0.0000e+00, 2.8223e-01, 1.3205e-01, 2.7297e-01, 2.7198e-02, 4.7993e-01,
         3.9556e-01, 7.5803e-01, 5.2864e-02, 0.0000e+00, 3.2457e-03, 9.2347e-01,
         3.5027e-01, 8.7910e-01, 1.3857e-01, 5.4493e-01, 2.8385e-01, 2.3131e-02,
         2.2021e-01, 7.7931e-01, 8.2929e-01, 7.7227e-02, 6.7964e-01, 6.5525e-03,
         1.1671e+00, 1.6185e-01, 8.6518e-01, 7.2144e-01, 1.5553e-01, 1.8723e-01,
         3.0912e-01, 2.2770e-01, 3.4688e-04, 5.9035e-01, 1.8851e-01, 3.0933e-01,
         3.9788e-01, 7.8491e-02, 4.9697e-01, 1.6799e-01, 1.1093e+00, 6.1943e-01,
         1.1320e-01, 6.1674e-02, 3.3545e-01, 5.6332e-01, 2.6037e-01, 0.0000e+00,
         3.1556e-01, 2.9495e-03, 4.8220e-02, 5.0289e-01, 1.4466e-01, 1.1840e-01,
         8.1778e-04, 1.4077e+00, 6.4692e-01, 5.2400e-01, 1.1676e+00, 1.3806e-01,
         8.6054e-02, 4.1061e-01, 1.3856e-01, 1.7488e-01, 8.3084e-01, 5.7673e-01,
         3.7623e-01, 1.0844e-02, 1.0157e+00, 0.0000e+00, 1.5535e+00, 6.4133e-01,
         4.5980e-03, 8.3700e-01, 7.2769e-01, 2.1636e-01, 2.5576e-02, 1.3818e-01,
         0.0000e+00, 1.8236e-02, 8.0015e-01, 5.5955e-01, 1.8420e-02, 1.1025e+00,
         1.2693e+00, 4.8276e-01, 5.6719e-02, 2.3824e-01, 1.1640e-02, 1.5858e+00,
         1.7357e-03, 0.0000e+00, 0.0000e+00, 7.0189e-01, 8.5572e-01, 0.0000e+00,
         1.7370e+00, 1.7966e-01, 2.5093e-01, 1.3590e+00, 5.8045e-02, 2.2101e-02,
         8.3266e-04, 2.5470e-01, 1.3876e-01, 1.7977e-02, 8.7361e-01, 1.6914e-02,
         1.0094e-02, 2.0186e-03, 2.4001e-01, 0.0000e+00, 1.1350e+00, 7.6280e-01,
         1.4849e-01, 4.9082e-01]])
Predictions of Sample/s for 0. cluster head: {'predictions': tensor([1]), 'probabilities': tensor([[0.0222, 0.4682, 0.0046, 0.1962, 0.3088]]), 'targets': tensor([11], dtype=torch.int32), 'neighbors': tensor([[50000, 31710, 33776, 15115, 29206,  8543, 48960, 28464, 44038, 14245,
         31761, 13761, 44925, 24779,  7042, 49322, 33797,  4095, 12121, 19876,
         43046]])}
Predictions of Sample/s for 1. cluster head: {'predictions': tensor([6]), 'probabilities': tensor([[1.0043e-03, 7.6323e-04, 1.1703e-04, 8.9791e-04, 8.2826e-04, 2.1371e-03,
         6.7304e-01, 6.5357e-03, 6.1613e-03, 1.3811e-01, 1.3981e-02, 3.1636e-04,
         1.2787e-02, 4.0880e-02, 5.6481e-02, 3.2323e-02, 2.3206e-03, 2.2806e-03,
         6.2306e-04, 8.4127e-03]]), 'targets': tensor([11], dtype=torch.int32), 'neighbors': tensor([[50000, 31710, 33776, 15115, 29206,  8543, 48960, 28464, 44038, 14245,
         31761, 13761, 44925, 24779,  7042, 49322, 33797,  4095, 12121, 19876,
         43046]])}
Predictions of Sample/s for 2. cluster head: {'predictions': tensor([60]), 'probabilities': tensor([[3.5146e-03, 7.6253e-05, 1.5058e-04, 1.1139e-03, 1.1225e-04, 4.3283e-03,
         2.5138e-05, 1.3498e-02, 1.0295e-02, 8.8233e-02, 4.4120e-05, 4.4779e-05,
         2.3820e-03, 1.8911e-04, 7.6899e-05, 1.9439e-03, 4.8538e-03, 2.5397e-03,
         1.0799e-04, 9.1903e-04, 1.1517e-04, 9.1070e-03, 1.6914e-03, 3.6327e-03,
         4.9620e-04, 4.5659e-04, 9.3698e-05, 4.9022e-05, 3.4424e-05, 7.8502e-04,
         2.4298e-03, 4.0003e-05, 1.0824e-04, 7.7851e-05, 4.4830e-04, 3.1329e-04,
         1.9040e-05, 7.3833e-02, 3.6296e-02, 2.3429e-03, 5.3973e-03, 8.8724e-05,
         1.3134e-04, 2.0021e-03, 4.8805e-04, 9.2255e-05, 6.1681e-03, 1.2547e-04,
         3.6852e-03, 4.0373e-04, 3.9885e-04, 1.7428e-02, 1.7443e-04, 2.1375e-04,
         5.8077e-04, 4.7671e-05, 1.5735e-04, 1.5073e-03, 4.3898e-05, 1.0326e-04,
         4.7656e-01, 2.9578e-03, 8.0768e-04, 2.8162e-03, 6.8833e-06, 1.8675e-03,
         6.4623e-05, 1.8152e-02, 9.0412e-04, 5.0636e-03, 1.2355e-04, 2.4029e-05,
         6.7252e-04, 2.5349e-04, 1.0358e-05, 3.6641e-02, 3.9775e-06, 1.9255e-04,
         9.8493e-05, 1.1398e-04, 1.5279e-05, 6.0966e-03, 1.4613e-05, 5.2386e-05,
         1.4138e-04, 5.7392e-04, 2.3659e-03, 2.0385e-02, 4.5659e-04, 1.8735e-05,
         3.2998e-03, 1.4560e-04, 6.0996e-02, 1.0350e-02, 1.0469e-02, 1.4078e-02,
         5.7600e-03, 8.7998e-03, 2.4145e-03, 1.7598e-04]]), 'targets': tensor([11], dtype=torch.int32), 'neighbors': tensor([[50000, 31710, 33776, 15115, 29206,  8543, 48960, 28464, 44038, 14245,
         31761, 13761, 44925, 24779,  7042, 49322, 33797,  4095, 12121, 19876,
         43046]])}
XAI-SCAN> python selflabel.py --config_env configs/env.yml --config_exp configs/selflabel/selflabel_cifar20.yml
{'setup': 'selflabel', 'use_ema': False, 'confidence_threshold': 0.99, 'criterion': 'confidence-cross-entropy', 'criterion_kwargs': {'apply_class_balancing': True}, 'backbone': 'resnet18', 'num_heads': 1, 'train_db_name': 'cifar-20', 'val_db_name': 'cifar-20', 'num_classes': 20, 'augmentation_strategy': 'scan', 'augmentation_kwargs': {'crop_size': 32, 'normalize': {'mean': [0.5071, 0.4867, 0.4408], 'std': [0.2675, 0.2565, 0.2761]}, 'num_strong_augs': 4, 'cutout_kwargs': {'n_holes': 1, 'length': 16, 'random': True}}, 'transformation_kwargs': {'crop_size': 32, 'normalize': {'mean': [0.5071, 0.4867, 0.4408], 'std': [0.2675, 0.2565, 0.2761]}}, 'epochs': 200, 'optimizer': 'adam', 'optimizer_kwargs': {'lr': 0.0001, 'weight_decay': 0.0001}, 'batch_size': 1000, 'num_workers': 8, 'scheduler': 'constant', 'pretext_dir': './results\\cifar-20\\pretext', 'pretext_checkpoint': './results\\cifar-20\\pretext\\checkpoint.pth.tar', 'pretext_model': './results\\cifar-20\\pretext\\model.pth.tar', 'topk_neighbors_train_path': './results\\cifar-20\\pretext\\topk-train-neighbors.npy', 'topk_neighbors_val_path': './results\\cifar-20\\pretext\\topk-val-neighbors.npy', 'scan_dir': './results\\cifar-20\\scan', 'scan_checkpoint': './results\\cifar-20\\scan\\checkpoint.pth.tar', 'scan_model': './results\\cifar-20\\scan\\model.pth.tar', 'selflabel_dir': './results\\cifar-20\\selflabel', 'selflabel_checkpoint': './results\\cifar-20\\selflabel\\checkpoint.pth.tar', 'selflabel_model': './results\\cifar-20\\selflabel\\model.pth.tar'}
Retrieve model
ClusteringModel(
  (backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (shortcut): Sequential()
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  )
  (cluster_head): ModuleList(
    (0): Linear(in_features=512, out_features=20, bias=True)
  )
)
Get loss
ConfidenceBasedCE(
  (loss): MaskedCrossEntropyLoss()
  (softmax): Softmax(dim=1)
)
Set CuDNN benchmark
Retrieve optimizer
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    lr: 0.0001
    maximize: False
    weight_decay: 0.0001
)
Retrieve dataset
Files already downloaded and verified
Files already downloaded and verified
Train samples 50000 - Val samples 10000
No checkpoint file at ./results\cifar-20\selflabel\checkpoint.pth.tar
Starting main loop
Epoch 1/200
----------
Adjusted learning rate to 0.00010
Train ...
Epoch: [0][ 0/50]       Loss 5.1036e-02 (5.1036e-02)
Epoch: [0][25/50]       Loss 5.9566e-02 (7.4652e-02)
Evaluate ...
{'ACC': 0.4225, 'ARI': 0.27863748887878337, 'NMI': 0.44075521959194974, 'ACC Top-5': 0.7184, 'hungarian_match': [(0, 18), (1, 1), (2, 13), (3, 8), (4, 7), (5, 0), (6, 15), (7, 10), (8, 9), (9, 2), (10, 12), (11, 3), (12, 16), (13, 14), (14, 19), (15, 5), (16, 6), (17, 17), (18, 4), (19, 11)]}
Checkpoint ...
Epoch 2/200
----------
Adjusted learning rate to 0.00010
Train ...
Epoch: [1][ 0/50]       Loss 8.6245e-02 (8.6245e-02)
Epoch: [1][25/50]       Loss 7.1432e-02 (7.9205e-02)
Evaluate ...
{'ACC': 0.4246, 'ARI': 0.2751825300319987, 'NMI': 0.4384359356259941, 'ACC Top-5': 0.7194, 'hungarian_match': [(0, 18), (1, 1), (2, 13), (3, 8), (4, 7), (5, 0), (6, 15), (7, 10), (8, 9), (9, 2), (10, 12), (11, 3), (12, 16), (13, 14), (14, 19), (15, 5), (16, 6), (17, 17), (18, 4), (19, 11)]}
Checkpoint ...
Epoch 3/200
----------
Adjusted learning rate to 0.00010
Train ...
Epoch: [2][ 0/50]       Loss 7.3052e-02 (7.3052e-02)
Epoch: [2][25/50]       Loss 8.0091e-02 (9.1460e-02)
Evaluate ...
{'ACC': 0.4313, 'ARI': 0.2810981002826555, 'NMI': 0.4470265536522294, 'ACC Top-5': 0.7165, 'hungarian_match': [(0, 18), (1, 1), (2, 13), (3, 8), (4, 7), (5, 0), (6, 15), (7, 10), (8, 9), (9, 2), (10, 12), (11, 3), (12, 16), (13, 14), (14, 19), (15, 5), (16, 6), (17, 17), (18, 4), (19, 11)]}
Checkpoint ...

.
..
...

Epoch 198/200
----------
Adjusted learning rate to 0.00010
Train ...
Epoch: [197][ 0/50]     Loss 1.1247e-01 (1.1247e-01)
Epoch: [197][25/50]     Loss 1.1957e-01 (1.1843e-01)
Evaluate ...
{'ACC': 0.4347, 'ARI': 0.283577853023369, 'NMI': 0.4484461742591996, 'ACC Top-5': 0.6936, 'hungarian_match': [(0, 18), (1, 1), (2, 15), (3, 8), (4, 7), (5, 10), (6, 13), (7, 9), (8, 3), (9, 2), (10, 12), (11, 5), (12, 0), (13, 14), (14, 19), (15, 16), (16, 6), (17, 17), (18, 4), (19, 11)]}
Checkpoint ...
Epoch 199/200
----------
Adjusted learning rate to 0.00010
Train ...
Epoch: [198][ 0/50]     Loss 1.0189e-01 (1.0189e-01)
Epoch: [198][25/50]     Loss 1.5774e-01 (1.1678e-01)
Evaluate ...
{'ACC': 0.4343, 'ARI': 0.28025478753116034, 'NMI': 0.4424734431555873, 'ACC Top-5': 0.6909, 'hungarian_match': [(0, 18), (1, 1), (2, 15), (3, 8), (4, 7), (5, 10), (6, 13), (7, 9), (8, 3), (9, 2), (10, 12), (11, 5), (12, 0), (13, 14), (14, 19), (15, 16), (16, 6), (17, 17), (18, 4), (19, 11)]}
Checkpoint ...
Epoch 200/200
----------
Adjusted learning rate to 0.00010
Train ...
Epoch: [199][ 0/50]     Loss 1.1055e-01 (1.1055e-01)
Epoch: [199][25/50]     Loss 1.1768e-01 (1.1345e-01)
Evaluate ...
{'ACC': 0.4335, 'ARI': 0.28078963342560115, 'NMI': 0.4445676235121678, 'ACC Top-5': 0.688, 'hungarian_match': [(0, 18), (1, 1), (2, 15), (3, 8), (4, 7), (5, 10), (6, 13), (7, 9), (8, 3), (9, 2), (10, 12), (11, 5), (12, 0), (13, 14), (14, 19), (15, 16), (16, 6), (17, 17), (18, 4), (19, 11)]}
Checkpoint ...
Evaluate model at the end
{'ACC': 0.4335, 'ARI': 0.28078963342560115, 'NMI': 0.4445676235121678, 'ACC Top-5': 0.688, 'hungarian_match': [(0, 18), (1, 1), (2, 15), (3, 8), (4, 7), (5, 10), (6, 13), (7, 9), (8, 3), (9, 2), (10, 12), (11, 5), (12, 0), (13, 14), (14, 19), (15, 16), (16, 6), (17, 17), (18, 4), (19, 11)]}